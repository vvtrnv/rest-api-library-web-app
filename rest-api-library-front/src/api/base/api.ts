/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Author
 */
export interface Author {
    /**
     * 
     * @type {number}
     * @memberof Author
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Author
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {Array<Author>}
     * @memberof Book
     */
    authorsByBook?: Array<Author>;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    publishPlace?: string;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    publishYear?: number;
    /**
     * 
     * @type {Publisher}
     * @memberof Book
     */
    publisherByBook?: Publisher;
    /**
     * 
     * @type {Array<Rubric>}
     * @memberof Book
     */
    rubricsByBook?: Array<Rubric>;
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ModelAndView
     */
    model?: any;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndView.StatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
 * @export
 * @namespace ModelAndView
 */
export namespace ModelAndView {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        _100CONTINUE = <any> '100 CONTINUE',
        _101SWITCHINGPROTOCOLS = <any> '101 SWITCHING_PROTOCOLS',
        _102PROCESSING = <any> '102 PROCESSING',
        _103CHECKPOINT = <any> '103 CHECKPOINT',
        _200OK = <any> '200 OK',
        _201CREATED = <any> '201 CREATED',
        _202ACCEPTED = <any> '202 ACCEPTED',
        _203NONAUTHORITATIVEINFORMATION = <any> '203 NON_AUTHORITATIVE_INFORMATION',
        _204NOCONTENT = <any> '204 NO_CONTENT',
        _205RESETCONTENT = <any> '205 RESET_CONTENT',
        _206PARTIALCONTENT = <any> '206 PARTIAL_CONTENT',
        _207MULTISTATUS = <any> '207 MULTI_STATUS',
        _208ALREADYREPORTED = <any> '208 ALREADY_REPORTED',
        _226IMUSED = <any> '226 IM_USED',
        _300MULTIPLECHOICES = <any> '300 MULTIPLE_CHOICES',
        _301MOVEDPERMANENTLY = <any> '301 MOVED_PERMANENTLY',
        _302FOUND = <any> '302 FOUND',
        _302MOVEDTEMPORARILY = <any> '302 MOVED_TEMPORARILY',
        _303SEEOTHER = <any> '303 SEE_OTHER',
        _304NOTMODIFIED = <any> '304 NOT_MODIFIED',
        _305USEPROXY = <any> '305 USE_PROXY',
        _307TEMPORARYREDIRECT = <any> '307 TEMPORARY_REDIRECT',
        _308PERMANENTREDIRECT = <any> '308 PERMANENT_REDIRECT',
        _400BADREQUEST = <any> '400 BAD_REQUEST',
        _401UNAUTHORIZED = <any> '401 UNAUTHORIZED',
        _402PAYMENTREQUIRED = <any> '402 PAYMENT_REQUIRED',
        _403FORBIDDEN = <any> '403 FORBIDDEN',
        _404NOTFOUND = <any> '404 NOT_FOUND',
        _405METHODNOTALLOWED = <any> '405 METHOD_NOT_ALLOWED',
        _406NOTACCEPTABLE = <any> '406 NOT_ACCEPTABLE',
        _407PROXYAUTHENTICATIONREQUIRED = <any> '407 PROXY_AUTHENTICATION_REQUIRED',
        _408REQUESTTIMEOUT = <any> '408 REQUEST_TIMEOUT',
        _409CONFLICT = <any> '409 CONFLICT',
        _410GONE = <any> '410 GONE',
        _411LENGTHREQUIRED = <any> '411 LENGTH_REQUIRED',
        _412PRECONDITIONFAILED = <any> '412 PRECONDITION_FAILED',
        _413PAYLOADTOOLARGE = <any> '413 PAYLOAD_TOO_LARGE',
        _413REQUESTENTITYTOOLARGE = <any> '413 REQUEST_ENTITY_TOO_LARGE',
        _414URITOOLONG = <any> '414 URI_TOO_LONG',
        _414REQUESTURITOOLONG = <any> '414 REQUEST_URI_TOO_LONG',
        _415UNSUPPORTEDMEDIATYPE = <any> '415 UNSUPPORTED_MEDIA_TYPE',
        _416REQUESTEDRANGENOTSATISFIABLE = <any> '416 REQUESTED_RANGE_NOT_SATISFIABLE',
        _417EXPECTATIONFAILED = <any> '417 EXPECTATION_FAILED',
        _418IAMATEAPOT = <any> '418 I_AM_A_TEAPOT',
        _419INSUFFICIENTSPACEONRESOURCE = <any> '419 INSUFFICIENT_SPACE_ON_RESOURCE',
        _420METHODFAILURE = <any> '420 METHOD_FAILURE',
        _421DESTINATIONLOCKED = <any> '421 DESTINATION_LOCKED',
        _422UNPROCESSABLEENTITY = <any> '422 UNPROCESSABLE_ENTITY',
        _423LOCKED = <any> '423 LOCKED',
        _424FAILEDDEPENDENCY = <any> '424 FAILED_DEPENDENCY',
        _425TOOEARLY = <any> '425 TOO_EARLY',
        _426UPGRADEREQUIRED = <any> '426 UPGRADE_REQUIRED',
        _428PRECONDITIONREQUIRED = <any> '428 PRECONDITION_REQUIRED',
        _429TOOMANYREQUESTS = <any> '429 TOO_MANY_REQUESTS',
        _431REQUESTHEADERFIELDSTOOLARGE = <any> '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
        _451UNAVAILABLEFORLEGALREASONS = <any> '451 UNAVAILABLE_FOR_LEGAL_REASONS',
        _500INTERNALSERVERERROR = <any> '500 INTERNAL_SERVER_ERROR',
        _501NOTIMPLEMENTED = <any> '501 NOT_IMPLEMENTED',
        _502BADGATEWAY = <any> '502 BAD_GATEWAY',
        _503SERVICEUNAVAILABLE = <any> '503 SERVICE_UNAVAILABLE',
        _504GATEWAYTIMEOUT = <any> '504 GATEWAY_TIMEOUT',
        _505HTTPVERSIONNOTSUPPORTED = <any> '505 HTTP_VERSION_NOT_SUPPORTED',
        _506VARIANTALSONEGOTIATES = <any> '506 VARIANT_ALSO_NEGOTIATES',
        _507INSUFFICIENTSTORAGE = <any> '507 INSUFFICIENT_STORAGE',
        _508LOOPDETECTED = <any> '508 LOOP_DETECTED',
        _509BANDWIDTHLIMITEXCEEDED = <any> '509 BANDWIDTH_LIMIT_EXCEEDED',
        _510NOTEXTENDED = <any> '510 NOT_EXTENDED',
        _511NETWORKAUTHENTICATIONREQUIRED = <any> '511 NETWORK_AUTHENTICATION_REQUIRED'
    }
}

/**
 * 
 * @export
 * @interface Publisher
 */
export interface Publisher {
    /**
     * 
     * @type {Array<Book>}
     * @memberof Publisher
     */
    booksById?: Array<Book>;
    /**
     * 
     * @type {number}
     * @memberof Publisher
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Publisher
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface Reader
 */
export interface Reader {
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    address?: string;
    /**
     * 
     * @type {Array<Stock>}
     * @memberof Reader
     */
    booksByReader?: Array<Stock>;
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    dateReg?: string;
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    dateRereg?: string;
    /**
     * 
     * @type {number}
     * @memberof Reader
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    libraryCard?: string;
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    middlename?: string;
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Reader
     */
    phone?: string;
}

/**
 * 
 * @export
 * @interface Rubric
 */
export interface Rubric {
    /**
     * 
     * @type {number}
     * @memberof Rubric
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Rubric
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Rubric
     */
    udkId?: string;
}

/**
 * 
 * @export
 * @interface Stock
 */
export interface Stock {
    /**
     * 
     * @type {Book}
     * @memberof Stock
     */
    bookByBookId?: Book;
    /**
     * 
     * @type {number}
     * @memberof Stock
     */
    inventoryId?: number;
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}


/**
 * AuthorControllerApi - fetch parameter creator
 * @export
 */
export const AuthorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a author
         * @param {Author} author author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(author: Author, options: any = {}): FetchArgs {
            // verify required parameter 'author' is not null or undefined
            if (author === null || author === undefined) {
                throw new RequiredError('author','Required parameter author was null or undefined when calling createUsingPOST.');
            }
            const localVarPath = `/author`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Author" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(author || {}) : (author || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a author
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE.');
            }
            const localVarPath = `/author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a author
         * @param {Author} author author
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(author: Author, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'author' is not null or undefined
            if (author === null || author === undefined) {
                throw new RequiredError('author','Required parameter author was null or undefined when calling editUsingPUT.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT.');
            }
            const localVarPath = `/author/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Author" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(author || {}) : (author || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuthorsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/author`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorControllerApi - functional programming interface
 * @export
 */
export const AuthorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a author
         * @param {Author} author author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(author: Author, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Author> {
            const localVarFetchArgs = AuthorControllerApiFetchParamCreator(configuration).createUsingPOST(author, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a author
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthorControllerApiFetchParamCreator(configuration).deleteUsingDELETE(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a author
         * @param {Author} author author
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(author: Author, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Author> {
            const localVarFetchArgs = AuthorControllerApiFetchParamCreator(configuration).editUsingPUT(author, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuthorsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Author>> {
            const localVarFetchArgs = AuthorControllerApiFetchParamCreator(configuration).getAllAuthorsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthorControllerApi - factory interface
 * @export
 */
export const AuthorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a author
         * @param {Author} author author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST(author: Author, options?: any) {
            return AuthorControllerApiFp(configuration).createUsingPOST(author, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a author
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE(id: number, options?: any) {
            return AuthorControllerApiFp(configuration).deleteUsingDELETE(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a author
         * @param {Author} author author
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT(author: Author, id: number, options?: any) {
            return AuthorControllerApiFp(configuration).editUsingPUT(author, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all authors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuthorsUsingGET(options?: any) {
            return AuthorControllerApiFp(configuration).getAllAuthorsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * AuthorControllerApi - object-oriented interface
 * @export
 * @class AuthorControllerApi
 * @extends {BaseAPI}
 */
export class AuthorControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a author
     * @param {Author} author author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorControllerApi
     */
    public createUsingPOST(author: Author, options?: any) {
        return AuthorControllerApiFp(this.configuration).createUsingPOST(author, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a author
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorControllerApi
     */
    public deleteUsingDELETE(id: number, options?: any) {
        return AuthorControllerApiFp(this.configuration).deleteUsingDELETE(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a author
     * @param {Author} author author
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorControllerApi
     */
    public editUsingPUT(author: Author, id: number, options?: any) {
        return AuthorControllerApiFp(this.configuration).editUsingPUT(author, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all authors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorControllerApi
     */
    public getAllAuthorsUsingGET(options?: any) {
        return AuthorControllerApiFp(this.configuration).getAllAuthorsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * BasicErrorControllerApi - fetch parameter creator
 * @export
 */
export const BasicErrorControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options: any = {}): FetchArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingDELETE(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingHEAD(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingOPTIONS(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPATCH(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPOST(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ModelAndView> {
            const localVarFetchArgs = BasicErrorControllerApiFetchParamCreator(configuration).errorHtmlUsingPUT(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingDELETE(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingHEAD(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingOPTIONS(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPATCH(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary errorHtml
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorHtmlUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorHtmlUsingPUT(options)(fetch, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingDELETE(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingHEAD(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingOPTIONS(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPATCH(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary errorHtml
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorHtmlUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorHtmlUsingPUT(options)(this.fetch, this.basePath);
    }

}

/**
 * BookControllerApi - fetch parameter creator
 * @export
 */
export const BookControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a book
         * @param {Book} book book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(book: Book, options: any = {}): FetchArgs {
            // verify required parameter 'book' is not null or undefined
            if (book === null || book === undefined) {
                throw new RequiredError('book','Required parameter book was null or undefined when calling createUsingPOST1.');
            }
            const localVarPath = `/book`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Book" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(book || {}) : (book || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a book
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE1.');
            }
            const localVarPath = `/book/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a book
         * @param {Book} book book
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(book: Book, id: number, options: any = {}): FetchArgs {
            // verify required parameter 'book' is not null or undefined
            if (book === null || book === undefined) {
                throw new RequiredError('book','Required parameter book was null or undefined when calling editUsingPUT1.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT1.');
            }
            const localVarPath = `/book/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Book" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(book || {}) : (book || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooksUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/book`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookControllerApi - functional programming interface
 * @export
 */
export const BookControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a book
         * @param {Book} book book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(book: Book, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Book> {
            const localVarFetchArgs = BookControllerApiFetchParamCreator(configuration).createUsingPOST1(book, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a book
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = BookControllerApiFetchParamCreator(configuration).deleteUsingDELETE1(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a book
         * @param {Book} book book
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(book: Book, id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Book> {
            const localVarFetchArgs = BookControllerApiFetchParamCreator(configuration).editUsingPUT1(book, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooksUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Book>> {
            const localVarFetchArgs = BookControllerApiFetchParamCreator(configuration).getAllBooksUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BookControllerApi - factory interface
 * @export
 */
export const BookControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a book
         * @param {Book} book book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST1(book: Book, options?: any) {
            return BookControllerApiFp(configuration).createUsingPOST1(book, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a book
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE1(id: number, options?: any) {
            return BookControllerApiFp(configuration).deleteUsingDELETE1(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a book
         * @param {Book} book book
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT1(book: Book, id: number, options?: any) {
            return BookControllerApiFp(configuration).editUsingPUT1(book, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all books
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooksUsingGET(options?: any) {
            return BookControllerApiFp(configuration).getAllBooksUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * BookControllerApi - object-oriented interface
 * @export
 * @class BookControllerApi
 * @extends {BaseAPI}
 */
export class BookControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a book
     * @param {Book} book book
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public createUsingPOST1(book: Book, options?: any) {
        return BookControllerApiFp(this.configuration).createUsingPOST1(book, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a book
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public deleteUsingDELETE1(id: number, options?: any) {
        return BookControllerApiFp(this.configuration).deleteUsingDELETE1(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a book
     * @param {Book} book book
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public editUsingPUT1(book: Book, id: number, options?: any) {
        return BookControllerApiFp(this.configuration).editUsingPUT1(book, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all books
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookControllerApi
     */
    public getAllBooksUsingGET(options?: any) {
        return BookControllerApiFp(this.configuration).getAllBooksUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * PublisherControllerApi - fetch parameter creator
 * @export
 */
export const PublisherControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a publisher
         * @param {Publisher} publisher publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(publisher: Publisher, options: any = {}): FetchArgs {
            // verify required parameter 'publisher' is not null or undefined
            if (publisher === null || publisher === undefined) {
                throw new RequiredError('publisher','Required parameter publisher was null or undefined when calling createUsingPOST2.');
            }
            const localVarPath = `/publisher`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Publisher" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(publisher || {}) : (publisher || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a publisher
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE2.');
            }
            const localVarPath = `/publisher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a publisher
         * @param {number} id id
         * @param {Publisher} publisher publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, publisher: Publisher, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT2.');
            }
            // verify required parameter 'publisher' is not null or undefined
            if (publisher === null || publisher === undefined) {
                throw new RequiredError('publisher','Required parameter publisher was null or undefined when calling editUsingPUT2.');
            }
            const localVarPath = `/publisher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Publisher" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(publisher || {}) : (publisher || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all publishers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublishersUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/publisher`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublisherControllerApi - functional programming interface
 * @export
 */
export const PublisherControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a publisher
         * @param {Publisher} publisher publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(publisher: Publisher, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Publisher> {
            const localVarFetchArgs = PublisherControllerApiFetchParamCreator(configuration).createUsingPOST2(publisher, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a publisher
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PublisherControllerApiFetchParamCreator(configuration).deleteUsingDELETE2(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a publisher
         * @param {number} id id
         * @param {Publisher} publisher publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, publisher: Publisher, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Publisher> {
            const localVarFetchArgs = PublisherControllerApiFetchParamCreator(configuration).editUsingPUT2(id, publisher, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all publishers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublishersUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Publisher>> {
            const localVarFetchArgs = PublisherControllerApiFetchParamCreator(configuration).getAllPublishersUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PublisherControllerApi - factory interface
 * @export
 */
export const PublisherControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a publisher
         * @param {Publisher} publisher publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST2(publisher: Publisher, options?: any) {
            return PublisherControllerApiFp(configuration).createUsingPOST2(publisher, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a publisher
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE2(id: number, options?: any) {
            return PublisherControllerApiFp(configuration).deleteUsingDELETE2(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a publisher
         * @param {number} id id
         * @param {Publisher} publisher publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT2(id: number, publisher: Publisher, options?: any) {
            return PublisherControllerApiFp(configuration).editUsingPUT2(id, publisher, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all publishers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPublishersUsingGET(options?: any) {
            return PublisherControllerApiFp(configuration).getAllPublishersUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * PublisherControllerApi - object-oriented interface
 * @export
 * @class PublisherControllerApi
 * @extends {BaseAPI}
 */
export class PublisherControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a publisher
     * @param {Publisher} publisher publisher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublisherControllerApi
     */
    public createUsingPOST2(publisher: Publisher, options?: any) {
        return PublisherControllerApiFp(this.configuration).createUsingPOST2(publisher, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a publisher
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublisherControllerApi
     */
    public deleteUsingDELETE2(id: number, options?: any) {
        return PublisherControllerApiFp(this.configuration).deleteUsingDELETE2(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a publisher
     * @param {number} id id
     * @param {Publisher} publisher publisher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublisherControllerApi
     */
    public editUsingPUT2(id: number, publisher: Publisher, options?: any) {
        return PublisherControllerApiFp(this.configuration).editUsingPUT2(id, publisher, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all publishers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublisherControllerApi
     */
    public getAllPublishersUsingGET(options?: any) {
        return PublisherControllerApiFp(this.configuration).getAllPublishersUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * ReaderControllerApi - fetch parameter creator
 * @export
 */
export const ReaderControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a reader
         * @param {Reader} reader reader
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(reader: Reader, options: any = {}): FetchArgs {
            // verify required parameter 'reader' is not null or undefined
            if (reader === null || reader === undefined) {
                throw new RequiredError('reader','Required parameter reader was null or undefined when calling createUsingPOST3.');
            }
            const localVarPath = `/reader`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Reader" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reader || {}) : (reader || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a reader
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE3.');
            }
            const localVarPath = `/reader/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a reader
         * @param {number} id id
         * @param {Reader} reader reader
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, reader: Reader, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT3.');
            }
            // verify required parameter 'reader' is not null or undefined
            if (reader === null || reader === undefined) {
                throw new RequiredError('reader','Required parameter reader was null or undefined when calling editUsingPUT3.');
            }
            const localVarPath = `/reader/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Reader" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(reader || {}) : (reader || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all readers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReaderUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/reader`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReaderControllerApi - functional programming interface
 * @export
 */
export const ReaderControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a reader
         * @param {Reader} reader reader
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(reader: Reader, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Reader> {
            const localVarFetchArgs = ReaderControllerApiFetchParamCreator(configuration).createUsingPOST3(reader, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a reader
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReaderControllerApiFetchParamCreator(configuration).deleteUsingDELETE3(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a reader
         * @param {number} id id
         * @param {Reader} reader reader
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, reader: Reader, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Reader> {
            const localVarFetchArgs = ReaderControllerApiFetchParamCreator(configuration).editUsingPUT3(id, reader, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all readers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReaderUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Reader>> {
            const localVarFetchArgs = ReaderControllerApiFetchParamCreator(configuration).getAllReaderUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReaderControllerApi - factory interface
 * @export
 */
export const ReaderControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a reader
         * @param {Reader} reader reader
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST3(reader: Reader, options?: any) {
            return ReaderControllerApiFp(configuration).createUsingPOST3(reader, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a reader
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE3(id: number, options?: any) {
            return ReaderControllerApiFp(configuration).deleteUsingDELETE3(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a reader
         * @param {number} id id
         * @param {Reader} reader reader
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT3(id: number, reader: Reader, options?: any) {
            return ReaderControllerApiFp(configuration).editUsingPUT3(id, reader, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all readers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReaderUsingGET(options?: any) {
            return ReaderControllerApiFp(configuration).getAllReaderUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * ReaderControllerApi - object-oriented interface
 * @export
 * @class ReaderControllerApi
 * @extends {BaseAPI}
 */
export class ReaderControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a reader
     * @param {Reader} reader reader
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReaderControllerApi
     */
    public createUsingPOST3(reader: Reader, options?: any) {
        return ReaderControllerApiFp(this.configuration).createUsingPOST3(reader, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a reader
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReaderControllerApi
     */
    public deleteUsingDELETE3(id: number, options?: any) {
        return ReaderControllerApiFp(this.configuration).deleteUsingDELETE3(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a reader
     * @param {number} id id
     * @param {Reader} reader reader
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReaderControllerApi
     */
    public editUsingPUT3(id: number, reader: Reader, options?: any) {
        return ReaderControllerApiFp(this.configuration).editUsingPUT3(id, reader, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all readers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReaderControllerApi
     */
    public getAllReaderUsingGET(options?: any) {
        return ReaderControllerApiFp(this.configuration).getAllReaderUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * RubricControllerApi - fetch parameter creator
 * @export
 */
export const RubricControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a rubric
         * @param {Rubric} rubric rubric
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(rubric: Rubric, options: any = {}): FetchArgs {
            // verify required parameter 'rubric' is not null or undefined
            if (rubric === null || rubric === undefined) {
                throw new RequiredError('rubric','Required parameter rubric was null or undefined when calling createUsingPOST4.');
            }
            const localVarPath = `/rubric`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Rubric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(rubric || {}) : (rubric || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a rubric
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE4.');
            }
            const localVarPath = `/rubric/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a rubric
         * @param {number} id id
         * @param {Rubric} rubric rubric
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(id: number, rubric: Rubric, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT4.');
            }
            // verify required parameter 'rubric' is not null or undefined
            if (rubric === null || rubric === undefined) {
                throw new RequiredError('rubric','Required parameter rubric was null or undefined when calling editUsingPUT4.');
            }
            const localVarPath = `/rubric/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Rubric" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(rubric || {}) : (rubric || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all rubrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRubricsUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/rubric`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RubricControllerApi - functional programming interface
 * @export
 */
export const RubricControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a rubric
         * @param {Rubric} rubric rubric
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(rubric: Rubric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Rubric> {
            const localVarFetchArgs = RubricControllerApiFetchParamCreator(configuration).createUsingPOST4(rubric, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a rubric
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RubricControllerApiFetchParamCreator(configuration).deleteUsingDELETE4(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a rubric
         * @param {number} id id
         * @param {Rubric} rubric rubric
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(id: number, rubric: Rubric, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Rubric> {
            const localVarFetchArgs = RubricControllerApiFetchParamCreator(configuration).editUsingPUT4(id, rubric, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all rubrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRubricsUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Rubric>> {
            const localVarFetchArgs = RubricControllerApiFetchParamCreator(configuration).getAllRubricsUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RubricControllerApi - factory interface
 * @export
 */
export const RubricControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a rubric
         * @param {Rubric} rubric rubric
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST4(rubric: Rubric, options?: any) {
            return RubricControllerApiFp(configuration).createUsingPOST4(rubric, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a rubric
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE4(id: number, options?: any) {
            return RubricControllerApiFp(configuration).deleteUsingDELETE4(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a rubric
         * @param {number} id id
         * @param {Rubric} rubric rubric
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT4(id: number, rubric: Rubric, options?: any) {
            return RubricControllerApiFp(configuration).editUsingPUT4(id, rubric, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all rubrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRubricsUsingGET(options?: any) {
            return RubricControllerApiFp(configuration).getAllRubricsUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * RubricControllerApi - object-oriented interface
 * @export
 * @class RubricControllerApi
 * @extends {BaseAPI}
 */
export class RubricControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a rubric
     * @param {Rubric} rubric rubric
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubricControllerApi
     */
    public createUsingPOST4(rubric: Rubric, options?: any) {
        return RubricControllerApiFp(this.configuration).createUsingPOST4(rubric, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a rubric
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubricControllerApi
     */
    public deleteUsingDELETE4(id: number, options?: any) {
        return RubricControllerApiFp(this.configuration).deleteUsingDELETE4(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a rubric
     * @param {number} id id
     * @param {Rubric} rubric rubric
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubricControllerApi
     */
    public editUsingPUT4(id: number, rubric: Rubric, options?: any) {
        return RubricControllerApiFp(this.configuration).editUsingPUT4(id, rubric, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all rubrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RubricControllerApi
     */
    public getAllRubricsUsingGET(options?: any) {
        return RubricControllerApiFp(this.configuration).getAllRubricsUsingGET(options)(this.fetch, this.basePath);
    }

}

/**
 * StockControllerApi - fetch parameter creator
 * @export
 */
export const StockControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a stock
         * @param {Stock} stock stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(stock: Stock, options: any = {}): FetchArgs {
            // verify required parameter 'stock' is not null or undefined
            if (stock === null || stock === undefined) {
                throw new RequiredError('stock','Required parameter stock was null or undefined when calling createUsingPOST5.');
            }
            const localVarPath = `/stock`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Stock" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(stock || {}) : (stock || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a stock
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteUsingDELETE5.');
            }
            const localVarPath = `/stock/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit a stock
         * @param {number} id id
         * @param {Stock} stock stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, stock: Stock, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editUsingPUT5.');
            }
            // verify required parameter 'stock' is not null or undefined
            if (stock === null || stock === undefined) {
                throw new RequiredError('stock','Required parameter stock was null or undefined when calling editUsingPUT5.');
            }
            const localVarPath = `/stock/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Stock" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(stock || {}) : (stock || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Receive all stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStockUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/stock`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockControllerApi - functional programming interface
 * @export
 */
export const StockControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a stock
         * @param {Stock} stock stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(stock: Stock, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Stock> {
            const localVarFetchArgs = StockControllerApiFetchParamCreator(configuration).createUsingPOST5(stock, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a stock
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StockControllerApiFetchParamCreator(configuration).deleteUsingDELETE5(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Edit a stock
         * @param {number} id id
         * @param {Stock} stock stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, stock: Stock, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Stock> {
            const localVarFetchArgs = StockControllerApiFetchParamCreator(configuration).editUsingPUT5(id, stock, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Receive all stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStockUsingGET(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Stock>> {
            const localVarFetchArgs = StockControllerApiFetchParamCreator(configuration).getAllStockUsingGET(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(BASE_PATH + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StockControllerApi - factory interface
 * @export
 */
export const StockControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a stock
         * @param {Stock} stock stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsingPOST5(stock: Stock, options?: any) {
            return StockControllerApiFp(configuration).createUsingPOST5(stock, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a stock
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsingDELETE5(id: number, options?: any) {
            return StockControllerApiFp(configuration).deleteUsingDELETE5(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Edit a stock
         * @param {number} id id
         * @param {Stock} stock stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editUsingPUT5(id: number, stock: Stock, options?: any) {
            return StockControllerApiFp(configuration).editUsingPUT5(id, stock, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Receive all stock
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllStockUsingGET(options?: any) {
            return StockControllerApiFp(configuration).getAllStockUsingGET(options)(fetch, basePath);
        },
    };
};

/**
 * StockControllerApi - object-oriented interface
 * @export
 * @class StockControllerApi
 * @extends {BaseAPI}
 */
export class StockControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a stock
     * @param {Stock} stock stock
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockControllerApi
     */
    public createUsingPOST5(stock: Stock, options?: any) {
        return StockControllerApiFp(this.configuration).createUsingPOST5(stock, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a stock
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockControllerApi
     */
    public deleteUsingDELETE5(id: number, options?: any) {
        return StockControllerApiFp(this.configuration).deleteUsingDELETE5(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Edit a stock
     * @param {number} id id
     * @param {Stock} stock stock
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockControllerApi
     */
    public editUsingPUT5(id: number, stock: Stock, options?: any) {
        return StockControllerApiFp(this.configuration).editUsingPUT5(id, stock, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Receive all stock
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockControllerApi
     */
    public getAllStockUsingGET(options?: any) {
        return StockControllerApiFp(this.configuration).getAllStockUsingGET(options)(this.fetch, this.basePath);
    }

}

